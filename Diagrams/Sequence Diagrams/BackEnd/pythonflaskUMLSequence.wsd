@startuml
actor User
participant FlaskApp
participant request
participant jsonify
participant os
participant fileprocessing
participant questionprocessing
participant sendToModel
participant SSL
participant SSLify

User -> FlaskApp: POST /api/data
FlaskApp -> request: request.is_json
alt request is JSON
    FlaskApp -> request: request.get_json()
    FlaskApp -> sendToModel: sendTypedResponse_and_ChatGPTResponse(data)
    sendToModel -> FlaskApp: return data
    FlaskApp -> questionprocessing: eraseQuestion()
    questionprocessing -> FlaskApp: return success
    FlaskApp -> jsonify: jsonify(response)
    FlaskApp -> User: return response
else request is not JSON
    FlaskApp -> questionprocessing: eraseQuestion()
    questionprocessing -> FlaskApp: return success
    FlaskApp -> jsonify: jsonify(error)
    FlaskApp -> User: return error
end

User -> FlaskApp: POST /api/upload
FlaskApp -> request: request.is_json
alt request is JSON
    FlaskApp -> request: request.get_json()
    FlaskApp -> FlaskApp: app.logger.debug(f"Request data: {data}")
    FlaskApp -> FlaskApp: check file_name and file_content
    alt file_name or file_content missing
        FlaskApp -> jsonify: jsonify(error)
        FlaskApp -> User: return error
    else file_name and file_content present
        FlaskApp -> os: os.path.join('Temp_Save', file_name)
        FlaskApp -> fileprocessing: readFile(file_content, file_path, file_name)
        fileprocessing -> FlaskApp: return content
        FlaskApp -> sendToModel: sendFile_and_ChatGPTResponse(content)
        sendToModel -> FlaskApp: return verdict
        FlaskApp -> os: os.remove(file_path)
        FlaskApp -> questionprocessing: eraseQuestion()
        questionprocessing -> FlaskApp: return success
        FlaskApp -> jsonify: jsonify(verdict)
        FlaskApp -> User: return verdict
    end
else request is not JSON
    FlaskApp -> questionprocessing: eraseQuestion()
    questionprocessing -> FlaskApp: return success
    FlaskApp -> jsonify: jsonify(error)
    FlaskApp -> User: return error
end

User -> FlaskApp: POST /api/question
FlaskApp -> request: request.is_json
alt request is JSON
    FlaskApp -> request: request.get_json()
    FlaskApp -> FlaskApp: app.logger.debug(f"Request data: {data}")
    FlaskApp -> FlaskApp: check file_name and file_content
    alt file_name or file_content missing
        FlaskApp -> jsonify: jsonify(error)
        FlaskApp -> User: return error
    else file_name and file_content present
        FlaskApp -> os: os.path.join('Temp_Save', file_name)
        FlaskApp -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> FlaskApp: return result
        FlaskApp -> os: os.remove(file_path)
        FlaskApp -> jsonify: jsonify(result)
        FlaskApp -> User: return result
    end
else request is not JSON
    FlaskApp -> jsonify: jsonify(error)
    FlaskApp -> User: return error
end

User -> FlaskApp: POST /api/upload_python
FlaskApp -> request: request.is_json
alt request is JSON
    FlaskApp -> request: request.get_json()
    FlaskApp -> FlaskApp: check question_name and question_content
    alt question_name or question_content missing
        FlaskApp -> jsonify: jsonify(error)
        FlaskApp -> User: return error
    else question_name and question_content present
        FlaskApp -> os: os.path.join('Temp_Save', file_name)
        FlaskApp -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> FlaskApp: return result
        FlaskApp -> os: os.remove(file_path)
        FlaskApp -> FlaskApp: check file_name and file_content
        alt file_name or file_content missing
            FlaskApp -> jsonify: jsonify(error)
            FlaskApp -> User: return error
        else file_name and file_content present
            FlaskApp -> os: os.path.join('Temp_Save', file_name)
            FlaskApp -> fileprocessing: readFile(file_content, file_path, file_name)
            fileprocessing -> FlaskApp: return content
            FlaskApp -> sendToModel: sendFile_and_ChatGPTResponse(content)
            sendToModel -> FlaskApp: return verdict
            FlaskApp -> os: os.remove(file_path)
            FlaskApp -> questionprocessing: eraseQuestion()
            questionprocessing -> FlaskApp: return success
            FlaskApp -> jsonify: jsonify(verdict)
            FlaskApp -> User: return verdict
        end
    end
else request is not JSON
    FlaskApp -> questionprocessing: eraseQuestion()
    questionprocessing -> FlaskApp: return success
    FlaskApp -> jsonify: jsonify(error)
    FlaskApp -> User: return error
end

User -> FlaskApp: HTTPS request
FlaskApp -> SSLify: check if request is secure
alt request is not secure
    SSLify -> FlaskApp: redirect to HTTPS
end

@enduml

@startuml
actor User

participant FlaskApp as app
participant FlaskRequest as request
participant sendToModel
participant fileprocessing
participant questionprocessing
participant os
participant jsonify

User -> app: POST /api/data
app -> FlaskRequest: request.is_json
alt request is JSON
    FlaskRequest -> FlaskRequest: get_json()
    FlaskRequest -> sendToModel: sendTypedResponse_and_ChatGPTResponse(data)
    sendToModel -> sendToModel: process data
    sendToModel -> FlaskRequest: return data
    FlaskRequest -> questionprocessing: eraseQuestion()
    questionprocessing -> questionprocessing: process erase
    FlaskRequest -> jsonify: jsonify({"Verdict": data})
    jsonify -> User: return response
else request is not JSON
    FlaskRequest -> questionprocessing: eraseQuestion()
    questionprocessing -> questionprocessing: process erase
    FlaskRequest -> jsonify: jsonify({"error": "Invalid content type, must be application/json"})
    jsonify -> User: return 400 error
end

User -> app: POST /api/upload
app -> FlaskRequest: request.is_json
alt request is JSON
    FlaskRequest -> FlaskRequest: get_json()
    FlaskRequest -> FlaskRequest: get file details
    alt file details missing
        FlaskRequest -> jsonify: jsonify({"error": "Invalid request, missing fileName or fileContent"})
        jsonify -> User: return 400 error
    else file details present
        FlaskRequest -> os: os.path.join('Temp_Save', file_name)
        FlaskRequest -> fileprocessing: readFile(file_content, file_path, file_name)
        fileprocessing -> fileprocessing: process file
        fileprocessing -> FlaskRequest: return content
        FlaskRequest -> sendToModel: sendFile_and_ChatGPTResponse(content)
        sendToModel -> sendToModel: process content
        sendToModel -> FlaskRequest: return verdict
        FlaskRequest -> os: os.remove(file_path)
        FlaskRequest -> questionprocessing: eraseQuestion()
        questionprocessing -> questionprocessing: process erase
        FlaskRequest -> jsonify: jsonify({"Verdict": verdict})
        jsonify -> User: return response
    end
else request is not JSON
    FlaskRequest -> questionprocessing: eraseQuestion()
    questionprocessing -> questionprocessing: process erase
    FlaskRequest -> jsonify: jsonify({"error": "Invalid content type, must be application/json"})
    jsonify -> User: return 400 error
end

User -> app: POST /api/question
app -> FlaskRequest: request.is_json
alt request is JSON
    FlaskRequest -> FlaskRequest: get_json()
    FlaskRequest -> FlaskRequest: get question details
    alt question details missing
        FlaskRequest -> jsonify: jsonify({"error": "Invalid request, missing question name or file content"})
        jsonify -> User: return 400 error
    else question details present
        FlaskRequest -> os: os.path.join('Temp_Save', file_name)
        FlaskRequest -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> questionprocessing: process file
        questionprocessing -> FlaskRequest: return result
        alt no invalid error in result
            FlaskRequest -> os: os.remove(file_path)
        end
        FlaskRequest -> jsonify: jsonify({"Result": result})
        jsonify -> User: return response
    end
else request is not JSON
    FlaskRequest -> jsonify: jsonify({"error": "Invalid content type, must be application/json"})
    jsonify -> User: return 400 error
end

User -> app: POST /api/upload_python
app -> FlaskRequest: request.is_json
alt request is JSON
    FlaskRequest -> FlaskRequest: get_json()
    FlaskRequest -> FlaskRequest: get question details
    alt question details missing
        FlaskRequest -> jsonify: jsonify({"error": "Invalid request, missing question name or Question Content"})
        jsonify -> User: return 400 error
    else question details present
        FlaskRequest -> os: os.path.join('Temp_Save', file_name)
        FlaskRequest -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> questionprocessing: process file
        questionprocessing -> FlaskRequest: return result
        alt no invalid error in result
            FlaskRequest -> os: os.remove(file_path)
        end

        FlaskRequest -> FlaskRequest: get answer details
        alt answer details missing
            FlaskRequest -> jsonify: jsonify({"error": "Invalid request, missing fileName or fileContent"})
            jsonify -> User: return 400 error
        else answer details present
            FlaskRequest -> os: os.path.join('Temp_Save', file_name)
            FlaskRequest -> fileprocessing: readFile(file_content, file_path, file_name)
            fileprocessing -> fileprocessing: process file
            fileprocessing -> FlaskRequest: return content
            FlaskRequest -> sendToModel: sendFile_and_ChatGPTResponse(content)
            sendToModel -> sendToModel: process content
            sendToModel -> FlaskRequest: return verdict
            FlaskRequest -> os: os.remove(file_path)
            FlaskRequest -> questionprocessing: eraseQuestion()
            questionprocessing -> questionprocessing: process erase
            FlaskRequest -> jsonify: jsonify({"Verdict": verdict})
            jsonify -> User: return response
        end
    end
else request is not JSON
    FlaskRequest -> jsonify: jsonify({"error": "Invalid content type, must be application/json"})
    jsonify -> User: return 400 error
end

@enduml

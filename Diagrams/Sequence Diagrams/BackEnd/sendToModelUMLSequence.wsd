@startuml
actor Professor

participant sendFile_and_ChatGPTResponse
participant sendTypedResponse_and_ChatGPTResponse
participant readtxt
participant checkIfDOne
participant getAIResponse
participant replicateLlama3APICall
participant os
participant time

Professor -> sendFile_and_ChatGPTResponse: sendFile_and_ChatGPTResponse(file_content)
sendFile_and_ChatGPTResponse -> readtxt: readtxt('.\\Temp_Save\\questionsFORAI129.txt')
readtxt -> os: os.path.isfile(file_path)
alt file exists
    readtxt -> checkIfDOne: checkIfDOne(file_path)
    checkIfDOne -> os: os.path.isfile(file_path)
    alt file does not exist
        checkIfDOne -> time: time.sleep(5)
    else file exists
        checkIfDOne -> readtxt: return
        readtxt -> readtxt: open file and read contents
        readtxt -> sendFile_and_ChatGPTResponse: return contents
    end
else file does not exist
    readtxt -> Professor: return "Error: The file at {file_path} was not found."
end

alt "Error: Invalid" in file_content
    sendFile_and_ChatGPTResponse -> Professor: return file_content
else "Error: Invalid" in questions
    sendFile_and_ChatGPTResponse -> Professor: return questions
else questions is empty
    sendFile_and_ChatGPTResponse -> Professor: return "Please upload a valid question file before sending answers."
else valid questions and file_content
    sendFile_and_ChatGPTResponse -> getAIResponse: send_request(questions)
    getAIResponse -> sendFile_and_ChatGPTResponse: return AIresponse
    sendFile_and_ChatGPTResponse -> replicateLlama3APICall: askLlama3(file_content, AIresponse, questions)
    replicateLlama3APICall -> sendFile_and_ChatGPTResponse: return verdict
    sendFile_and_ChatGPTResponse -> Professor: return verdict
end

Professor -> sendTypedResponse_and_ChatGPTResponse: sendTypedResponse_and_ChatGPTResponse(student_answer)
sendTypedResponse_and_ChatGPTResponse -> readtxt: readtxt('.\\Temp_Save\\questionsFORAI129.txt')
readtxt -> os: os.path.isfile(file_path)
alt file exists
    readtxt -> checkIfDOne: checkIfDOne(file_path)
    checkIfDOne -> os: os.path.isfile(file_path)
    alt file does not exist
        checkIfDOne -> time: time.sleep(5)
    else file exists
        checkIfDOne -> readtxt: return
        readtxt -> readtxt: open file and read contents
        readtxt -> sendTypedResponse_and_ChatGPTResponse: return contents
    end
else file does not exist
    readtxt -> Professor: return "Error: The file at {file_path} was not found."
end

alt questions is empty
    sendTypedResponse_and_ChatGPTResponse -> Professor: return "Please upload a question before sending answers."
else "Error: Invalid" in questions
    sendTypedResponse_and_ChatGPTResponse -> Professor: return questions
else valid questions
    sendTypedResponse_and_ChatGPTResponse -> getAIResponse: send_request(questions)
    getAIResponse -> sendTypedResponse_and_ChatGPTResponse: return AIresponse
    sendTypedResponse_and_ChatGPTResponse -> replicateLlama3APICall: askLlama3(student_answer, AIresponse, questions)
    replicateLlama3APICall -> sendTypedResponse_and_ChatGPTResponse: return verdict
    sendTypedResponse_and_ChatGPTResponse -> Professor: return verdict
end

@enduml

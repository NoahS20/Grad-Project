@startuml
actor User

participant FlaskApp
participant sendToModel
participant fileprocessing
participant questionprocessing
participant saveFile
participant checkIfDone
participant readtxt
participant readdoc
participant readpdf
participant process_question
participant get_ai_response
participant replicate_llama_api_call
participant requests

User -> FlaskApp: POST /api/data
alt request.is_json
    FlaskApp -> FlaskApp: get_json()
    FlaskApp -> sendToModel: sendTypedResponse_and_ChatGPTResponse(data)
    sendToModel -> get_ai_response: get_ai_response(data)
    get_ai_response -> openai.Completion: create(engine=model, prompt=prompt, max_tokens=150)
    openai.Completion -> get_ai_response: return response
    get_ai_response -> sendToModel: return response
    sendToModel -> FlaskApp: return response
    FlaskApp -> User: return {"Verdict": data}
else request.is_not_json
    FlaskApp -> User: return {"error": "Invalid content type, must be application/json"}, 400
end

User -> FlaskApp: POST /api/upload
alt request.is_json
    FlaskApp -> FlaskApp: get_json()
    FlaskApp -> FlaskApp: check file_name and file_content
    alt missing fileName or fileContent
        FlaskApp -> User: return {"error": "Invalid request, missing fileName or fileContent"}, 400
    else valid fileName and fileContent
        FlaskApp -> fileprocessing: readFile(file_content, file_path, file_name)
        fileprocessing -> saveFile: call saveFile(file_content, file_path, file_name)
        saveFile -> saveFile: decode and save file
        saveFile -> fileprocessing: return "success"
        alt file extension is .txt
            fileprocessing -> readtxt: call readtxt(filepath)
        else file extension is .doc or .docx
            fileprocessing -> readdoc: call readdoc(filepath)
        else file extension is .pdf
            fileprocessing -> readpdf: call readpdf(filepath)
        else invalid filetype
            fileprocessing -> FlaskApp: return "Invalid filetype"
        end
        group read file content
            readtxt -> checkIfDone: check if file exists
            checkIfDone -> readtxt: file exists
            readtxt -> readtxt: read file content
            readtxt -> fileprocessing: return file content

            readdoc -> checkIfDone: check if file exists
            checkIfDone -> readdoc: file exists
            readdoc -> readdoc: read file content
            readdoc -> fileprocessing: return file content

            readpdf -> checkIfDone: check if file exists
            checkIfDone -> readpdf: file exists
            readpdf -> readpdf: read file content
            readpdf -> fileprocessing: return file content
        end
        fileprocessing -> sendToModel: sendFile_and_ChatGPTResponse(content)
        sendToModel -> get_ai_response: get_ai_response(content)
        get_ai_response -> openai.Completion: create(engine=model, prompt=prompt, max_tokens=150)
        openai.Completion -> get_ai_response: return response
        get_ai_response -> sendToModel: return response
        sendToModel -> FlaskApp: return response
        FlaskApp -> User: return {"Verdict": verdict}
        FlaskApp -> FlaskApp: os.remove(file_path)
    end
else request.is_not_json
    FlaskApp -> User: return {"error": "Invalid content type, must be application/json"}, 400
end

User -> FlaskApp: POST /api/question
alt request.is_json
    FlaskApp -> FlaskApp: get_json()
    FlaskApp -> FlaskApp: check file_name and file_content
    alt missing fileName or fileContent
        FlaskApp -> User: return {"error": "Invalid request, missing fileName or fileContent"}, 400
    else valid fileName and fileContent
        FlaskApp -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> saveFile: call saveFile(file_content, file_path, file_name)
        saveFile -> saveFile: decode and save file
        saveFile -> questionprocessing: return "success"
        alt file extension is .txt
            questionprocessing -> readtxt: call readtxt(filepath)
        else file extension is .doc or .docx
            questionprocessing -> readdoc: call readdoc(filepath)
        else file extension is .pdf
            questionprocessing -> readpdf: call readpdf(filepath)
        else invalid filetype
            questionprocessing -> FlaskApp: return "Invalid filetype"
        end
        group read file content
            readtxt -> checkIfDone: check if file exists
            checkIfDone -> readtxt: file exists
            readtxt -> readtxt: read file content
            readtxt -> questionprocessing: return file content

            readdoc -> checkIfDone: check if file exists
            checkIfDone -> readdoc: file exists
            readdoc -> readdoc: read file content
            readdoc -> questionprocessing: return file content

            readpdf -> checkIfDone: check if file exists
            checkIfDone -> readpdf: file exists
            readpdf -> readpdf: read file content
            readpdf -> questionprocessing: return file content
        end
        questionprocessing -> FlaskApp: return result
        FlaskApp -> User: return {"Result": result}
        FlaskApp -> FlaskApp: os.remove(file_path)
    end
else request.is_not_json
    FlaskApp -> User: return {"error": "Invalid content type, must be application/json"}, 400
end

User -> FlaskApp: POST /api/upload_python
alt request.is_json
    FlaskApp -> FlaskApp: get_json()
    FlaskApp -> FlaskApp: check question_name and question_content
    alt missing question_name or question_content
        FlaskApp -> User: return {"error": "Invalid request, missing fileName or fileContent"}, 400
    else valid question_name and question_content
        FlaskApp -> questionprocessing: readFile(file_content, file_path, file_name)
        questionprocessing -> saveFile: call saveFile(file_content, file_path, file_name)
        saveFile -> saveFile: decode and save file
        saveFile -> questionprocessing: return "success"
        alt file extension is .txt
            questionprocessing -> readtxt: call readtxt(filepath)
        else file extension is .doc or .docx
            questionprocessing -> readdoc: call readdoc(filepath)
        else file extension is .pdf
            questionprocessing -> readpdf: call readpdf(filepath)
        else invalid filetype
            questionprocessing -> FlaskApp: return "Invalid filetype"
        end
        group read file content
            readtxt -> checkIfDone: check if file exists
            checkIfDone -> readtxt: file exists
            readtxt -> readtxt: read file content
            readtxt -> questionprocessing: return file content

            readdoc -> checkIfDone: check if file exists
            checkIfDone -> readdoc: file exists
            readdoc -> readdoc: read file content
            readdoc -> questionprocessing: return file content

            readpdf -> checkIfDone: check if file exists
            checkIfDone -> readpdf: file exists
            readpdf -> readpdf: read file content
            readpdf -> questionprocessing: return file content
        end
        questionprocessing -> FlaskApp: return result
        FlaskApp -> FlaskApp: os.remove(file_path)
        
        FlaskApp -> FlaskApp: check answer_name and answer_content
        alt missing answer_name or answer_content
            FlaskApp -> User: return {"error": "Invalid request, missing fileName or fileContent"}, 400
        else valid answer_name and answer_content
            FlaskApp -> fileprocessing: readFile(file_content, file_path, file_name)
            fileprocessing -> saveFile: call saveFile(file_content, file_path, file_name)
            saveFile -> saveFile: decode and save file
            saveFile -> fileprocessing: return "success"
            alt file extension is .txt
                fileprocessing -> readtxt: call readtxt(filepath)
            else file extension is .doc or .docx
                fileprocessing -> readdoc: call readdoc(filepath)
            else file extension is .pdf
                fileprocessing -> readpdf: call readpdf(filepath)
            else invalid filetype
                fileprocessing -> FlaskApp: return "Invalid filetype"
            end
            group read file content
                readtxt -> checkIfDone: check if file exists
                checkIfDone -> readtxt: file exists
                readtxt -> readtxt: read file content
                readtxt -> fileprocessing: return file content

                readdoc -> checkIfDone: check if file exists
                checkIfDone -> readdoc: file exists
                readdoc -> readdoc: read file content
                readdoc -> fileprocessing: return file content

                readpdf -> checkIfDone: check if file exists
                checkIfDone -> readpdf: file exists
                readpdf -> readpdf: read file content
                readpdf -> fileprocessing: return file content
            end
            fileprocessing -> sendToModel: sendFile_and_ChatGPTResponse(content)
            sendToModel -> get_ai_response: get_ai_response(content)
            get_ai_response -> openai.Completion: create(engine=model, prompt=prompt, max_tokens=150)
            openai.Completion -> get_ai_response: return response
            get_ai_response -> sendToModel: return response
            sendToModel -> FlaskApp: return response
            FlaskApp -> User: return {"Verdict": verdict}
            FlaskApp -> FlaskApp: os.remove(file_path)
        end
    end
else request.is_not_json
    FlaskApp -> User: return {"error": "Invalid content type, must be application/json"}, 400
end
@enduml
@startuml
actor User

participant ChatComponent
participant fileTransferring
participant Subscription
participant ApiService
participant FileReader
participant ElementRef
participant HttpClient

User -> ChatComponent: sendMessage(textarea)
ChatComponent -> ChatComponent: loading = true
ChatComponent -> ChatComponent: scrollToBottom()
alt inputMessage.trim() is not empty
    ChatComponent -> ChatComponent: messages.push({ text: inputMessage, user: true })
    ChatComponent -> ChatComponent: sendData(inputMessage)
    ChatComponent -> ApiService: postData(inputMessage)
    ApiService -> HttpClient: POST /api/data
    HttpClient -> ApiService: return response
    ApiService -> ChatComponent: return response
    ChatComponent -> ChatComponent: respond(response.Verdict)
    ChatComponent -> ChatComponent: messages.push({ text: response.Verdict, user: false })
    ChatComponent -> ChatComponent: scrollToBottom()
    ChatComponent -> ChatComponent: inputMessage = ''
    ChatComponent -> textarea: textarea.style.height = '38px'
    ChatComponent -> ChatComponent: loading = false
end

User -> ChatComponent: confirmQuestionText(textarea)
alt checkEmpty(textarea) is true
    ChatComponent -> ChatComponent: confirmDialog('Would like to send this answer and select a question file for this answer?')
    ChatComponent -> User: showConfirmDialog
    User -> ChatComponent: handleConfirm(result)
    alt result is true
        ChatComponent -> ChatComponent: openQuestionDialog()
        ChatComponent -> ChatComponent: savedText = textarea
    end
end

User -> ChatComponent: onEnterKeyPress(event, textarea)
ChatComponent -> event: event.preventDefault()
alt checkEmpty(textarea) is true
    ChatComponent -> ChatComponent: confirmDialog('Would you like to send this answer and select a question for this answer?')
    ChatComponent -> User: showConfirmDialog
    User -> ChatComponent: handleConfirm(result)
    alt result is true
        ChatComponent -> ChatComponent: openQuestionDialog()
        ChatComponent -> ChatComponent: savedText = textarea
    end
end

User -> ChatComponent: openQuestionDialog()
ChatComponent -> document: document.getElementById("questionInput")
alt questionInput exists
    ChatComponent -> questionInput: questionInput.click()
    ChatComponent -> ChatComponent: question_uploaded = true
end

fileTransferring -> Subscription: currentData.subscribe(data)
Subscription -> ChatComponent: return data
ChatComponent -> ChatComponent: respondFile(data)

fileTransferring -> Subscription: question.subscribe(data)
Subscription -> ChatComponent: return data
ChatComponent -> ChatComponent: respondQuestion(data)

ChatComponent -> FileReader: readAsDataURL(file)
FileReader -> ChatComponent: return base64
ChatComponent -> ApiService: upload_question(file.name, base64Content)
ApiService -> HttpClient: POST /api/question
HttpClient -> ApiService: return response
ApiService -> ChatComponent: return response
ChatComponent -> ChatComponent: respond(response.Result)

ChatComponent -> FileReader: readAsDataURL(file)
FileReader -> ChatComponent: return base64
ChatComponent -> ApiService: upload_file(file.name, base64Content)
ApiService -> HttpClient: POST /api/upload
HttpClient -> ApiService: return response
ApiService -> ChatComponent: return response
ChatComponent -> ChatComponent: respond(response.Verdict)
alt response.Verdict is not empty
    ChatComponent -> ChatComponent: loading = false
end

@enduml

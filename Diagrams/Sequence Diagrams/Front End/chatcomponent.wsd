@startuml
actor User

participant ChatComponent
participant fileTransferring
participant Subscription
participant ApiService
participant FileReader
participant HttpClient

User -> ChatComponent: Interact with component

alt User sends message
    User -> ChatComponent: sendMessage(textarea)
    ChatComponent -> ChatComponent: loading = true
    ChatComponent -> ChatComponent: scrollToBottom()
    ChatComponent -> ChatComponent: messages.push({ text: inputMessage, user: true })
    ChatComponent -> ChatComponent: sendData(inputMessage)
    ChatComponent -> ApiService: postData(inputMessage)
    ApiService -> HttpClient: POST /api/data
    HttpClient -> ApiService: return response
    ApiService -> ChatComponent: return response
    ChatComponent -> ChatComponent: respond(response.Verdict)
    ChatComponent -> ChatComponent: messages.push({ text: response.Verdict, user: false })
    ChatComponent -> ChatComponent: scrollToBottom()
    ChatComponent -> ChatComponent: loading = false
end

alt User selects a file
    User -> ChatComponent: onFileSelected(event)
    ChatComponent -> ChatComponent: readFile(file)
    ChatComponent -> fileTransferring: fileTransfer(file)
    fileTransferring -> dataSource: next(file)
end

alt User selects a question file
    User -> ChatComponent: onQuestionSelected(event)
    ChatComponent -> ChatComponent: readQuestion(file)
    ChatComponent -> fileTransferring: questionTransfer(file)
    fileTransferring -> questionSource: next(file)
end

alt Subscription receives new file data
    fileTransferring -> Subscription: currentData.subscribe(data)
    Subscription -> ChatComponent: return data
    ChatComponent -> ChatComponent: respondFile(data)
    ChatComponent -> ChatComponent: sendFile(data)
    ChatComponent -> FileReader: readAsDataURL(file)
    FileReader -> ChatComponent: return base64
    ChatComponent -> ApiService: upload_file(file.name, base64Content)
    ApiService -> HttpClient: POST /api/upload
    HttpClient -> ApiService: return response
    ApiService -> ChatComponent: return response
    ChatComponent -> ChatComponent: respond(response.Verdict)
    ChatComponent -> ChatComponent: messages.push({ text: response.Verdict, user: false })
end

alt Subscription receives new question data
    fileTransferring -> Subscription: question.subscribe(data)
    Subscription -> ChatComponent: return data
    ChatComponent -> ChatComponent: respondQuestion(data)
    ChatComponent -> ChatComponent: sendQuestion(data)
    ChatComponent -> FileReader: readAsDataURL(file)
    FileReader -> ChatComponent: return base64
    ChatComponent -> ApiService: upload_question(file.name, base64Content)
    ApiService -> HttpClient: POST /api/question
    HttpClient -> ApiService: return response
    ApiService -> ChatComponent: return response
    ChatComponent -> ChatComponent: respond(response.Result)
    ChatComponent -> ChatComponent: messages.push({ text: response.Result, user: false })
end

@enduml
